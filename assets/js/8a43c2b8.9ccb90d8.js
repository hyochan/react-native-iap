"use strict";(self.webpackChunkreact_native_iap_docs=self.webpackChunkreact_native_iap_docs||[]).push([[2868],{571:(e,s,n)=>{n.d(s,{A:()=>r});var t=n(6540),i=n(4848);function a({className:e="adfit",style:s,unit:n,height:a,width:r}){return(0,t.useEffect)(()=>{const s=setTimeout(()=>{const s=document.querySelector(`.${e}`);if(!s)return void console.warn(`AdFit: Element with class "${e}" not found`);const t=s.querySelectorAll(".kakao_ad_area"),i=s.querySelectorAll('script[src*="kas/static/ba.min.js"]');t.forEach(e=>e.remove()),i.forEach(e=>e.remove());const c=document.createElement("ins"),l=document.createElement("script");c.className="kakao_ad_area",c.style.cssText="display:none; width:100%;",l.async=!0,l.type="text/javascript",l.src="//t1.daumcdn.net/kas/static/ba.min.js",c.setAttribute("data-ad-width",r.toString()),c.setAttribute("data-ad-height",a.toString()),c.setAttribute("data-ad-unit",n),s.appendChild(c),s.appendChild(l)},100);return()=>clearTimeout(s)},[e,n,a,r]),(0,i.jsx)("div",{style:s,children:(0,i.jsx)("div",{className:e})})}function r(){return(0,i.jsx)(a,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},5554:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"examples/available-purchases","title":"Available Purchases","description":"List prior purchases and check subscription status using useIAP.","source":"@site/docs/examples/available-purchases.md","sourceDirName":"examples","slug":"/examples/available-purchases","permalink":"/react-native-iap/docs/examples/available-purchases","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/react-native-iap/tree/main/docs/docs/examples/available-purchases.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Available Purchases","sidebar_label":"Available Purchases","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Subscriptions","permalink":"/react-native-iap/docs/examples/subscription-flow"},"next":{"title":"Offer Codes","permalink":"/react-native-iap/docs/examples/offer-code"}}');var i=n(4848),a=n(8453),r=n(571);const c={title:"Available Purchases",sidebar_label:"Available Purchases",sidebar_position:3},l="Available Purchases & Status",o={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Core Pattern",id:"core-pattern",level:2},{value:"Notes",id:"notes",level:2},{value:"Using <code>getAvailablePurchases()</code> Effectively",id:"using-getavailablepurchases-effectively",level:2},{value:"Example: Restore Button",id:"example-restore-button",level:3},{value:"Example: Check Non-Consumable Ownership (don\u2019t hide)",id:"example-check-non-consumable-ownership-dont-hide",level:3},{value:"Testing Checklist",id:"testing-checklist",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Source",id:"source",level:2}];function u(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"available-purchases--status",children:"Available Purchases & Status"})}),"\n",(0,i.jsx)(r.A,{}),"\n",(0,i.jsxs)(s.p,{children:["List prior purchases and check subscription status using ",(0,i.jsx)(s.code,{children:"useIAP"}),"."]}),"\n",(0,i.jsx)(s.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Ensure products/subscriptions are configured in stores"}),"\n",(0,i.jsx)(s.li,{children:"Users must be signed in to the device stores"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"core-pattern",children:"Core Pattern"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-tsx",children:"import {useEffect, useCallback} from 'react';\nimport {useIAP} from 'react-native-iap';\n\nconst SUB_IDS = ['your.premium'];\n\nexport function AvailablePurchasesExample() {\n  const {\n    connected,\n    subscriptions,\n    availablePurchases,\n    activeSubscriptions,\n    fetchProducts,\n    getAvailablePurchases,\n    getActiveSubscriptions,\n    finishTransaction,\n  } = useIAP({\n    onPurchaseSuccess: async (purchase) => {\n      await finishTransaction({purchase, isConsumable: false});\n      setTimeout(() => getActiveSubscriptions(), 1000);\n    },\n  });\n\n  const load = useCallback(async () => {\n    if (!connected) return;\n    fetchProducts({skus: SUB_IDS, type: 'subs'});\n    await getAvailablePurchases();\n  }, [connected, fetchProducts, getAvailablePurchases]);\n\n  useEffect(() => {\n    load();\n  }, [load]);\n\n  return null;\n}\n"})}),"\n",(0,i.jsx)(s.h2,{id:"notes",children:"Notes"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Use ",(0,i.jsx)(s.code,{children:"getAvailablePurchases()"})," to restore and list prior purchases."]}),"\n",(0,i.jsxs)(s.li,{children:["After successful purchases, refresh ",(0,i.jsx)(s.code,{children:"activeSubscriptions"})," to reflect status."]}),"\n",(0,i.jsxs)(s.li,{children:["Use ",(0,i.jsx)(s.code,{children:"deepLinkToSubscriptions()"})," to open system subscription settings."]}),"\n"]}),"\n",(0,i.jsxs)(s.h2,{id:"using-getavailablepurchases-effectively",children:["Using ",(0,i.jsx)(s.code,{children:"getAvailablePurchases()"})," Effectively"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["When to call:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"On first launch after connection to restore entitlements"}),"\n",(0,i.jsx)(s.li,{children:"On user action (e.g., \u201cRestore Purchases\u201d button)"}),"\n",(0,i.jsx)(s.li,{children:"After a successful purchase to reflect immediately in UI"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["De-duplication:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Some stores may return multiple records. Prefer de-duplicating by ",(0,i.jsx)(s.code,{children:"productId"})," and most recent ",(0,i.jsx)(s.code,{children:"transactionDate"}),"."]}),"\n",(0,i.jsx)(s.li,{children:"Keep latest record per product to decide ownership (non-consumables) or show history."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["Ownership logic:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Non-consumables: if a purchase exists for a given ",(0,i.jsx)(s.code,{children:"productId"}),", mark as owned and adjust UI (disable purchase, show badge). Avoid silently hiding."]}),"\n",(0,i.jsx)(s.li,{children:"Consumables: do not treat available purchases as ownership; they\u2019re historical"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"example-restore-button",children:"Example: Restore Button"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-tsx",children:'function RestoreButton() {\n  const {connected, getAvailablePurchases} = useIAP();\n  const onRestore = async () => {\n    if (!connected) return;\n    try {\n      await getAvailablePurchases();\n    } catch (e) {\n      // present user-friendly error\n    }\n  };\n  return <Button title="Restore Purchases" onPress={onRestore} />;\n}\n'})}),"\n",(0,i.jsx)(s.h3,{id:"example-check-non-consumable-ownership-dont-hide",children:"Example: Check Non-Consumable Ownership (don\u2019t hide)"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-tsx",children:"type MinimalPurchase = {productId?: string};\n\nfunction buildOwnedNonConsumables(purchases: MinimalPurchase[]) {\n  const owned = new Set<string>();\n  for (const p of purchases) {\n    if (p.productId) owned.add(p.productId);\n  }\n  return owned;\n}\n\nfunction ProductList({products}: {products: {id: string; title: string}[]}) {\n  const {availablePurchases} = useIAP();\n  const owned = React.useMemo(\n    () => buildOwnedNonConsumables(availablePurchases),\n    [availablePurchases],\n  );\n\n  return (\n    <>\n      {products.map((p) => {\n        const isOwned = owned.has(p.id);\n        return (\n          <View key={p.id} style={{padding: 12}}>\n            <Text>{p.title}</Text>\n            {isOwned ? (\n              <Text style={{color: 'green'}}>Owned</Text>\n            ) : (\n              <Button title=\"Buy\" onPress={() => handleBuy(p.id)} />\n            )}\n          </View>\n        );\n      })}\n    </>\n  );\n}\n"})}),"\n",(0,i.jsx)(s.h2,{id:"testing-checklist",children:"Testing Checklist"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Confirm available purchases populate after sign-in and initial fetch"}),"\n",(0,i.jsx)(s.li,{children:"Validate that restored purchases match server-side entitlements"}),"\n",(0,i.jsxs)(s.li,{children:["Check that ",(0,i.jsx)(s.code,{children:"activeSubscriptions"})," reflects real status after refresh"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Empty list: ensure the device account owns purchases and is signed in"}),"\n",(0,i.jsxs)(s.li,{children:["Duplicates: de-duplicate by ",(0,i.jsx)(s.code,{children:"productId"})," and latest ",(0,i.jsx)(s.code,{children:"transactionDate"})]}),"\n",(0,i.jsx)(s.li,{children:"Errors: wrap calls in try/catch and present user-friendly messages"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"source",children:"Source"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["AvailablePurchases.tsx: ",(0,i.jsx)(s.a,{href:"https://github.com/hyochan/react-native-iap/blob/main/example/screens/AvailablePurchases.tsx",children:"https://github.com/hyochan/react-native-iap/blob/main/example/screens/AvailablePurchases.tsx"})]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>c});var t=n(6540);const i={},a=t.createContext(i);function r(e){const s=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);