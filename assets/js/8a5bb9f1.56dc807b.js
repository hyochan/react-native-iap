"use strict";(self.webpackChunkreact_native_iap_docs=self.webpackChunkreact_native_iap_docs||[]).push([[5359],{571:(e,n,r)=>{r.d(n,{A:()=>t});var i=r(6540),s=r(4848);function o({className:e="adfit",style:n,unit:r,height:o,width:t}){return(0,i.useEffect)(()=>{const n=setTimeout(()=>{const n=document.querySelector(`.${e}`);if(!n)return void console.warn(`AdFit: Element with class "${e}" not found`);const i=n.querySelectorAll(".kakao_ad_area"),s=n.querySelectorAll('script[src*="kas/static/ba.min.js"]');i.forEach(e=>e.remove()),s.forEach(e=>e.remove());const a=document.createElement("ins"),c=document.createElement("script");a.className="kakao_ad_area",a.style.cssText="display:none; width:100%;",c.async=!0,c.type="text/javascript",c.src="//t1.daumcdn.net/kas/static/ba.min.js",a.setAttribute("data-ad-width",t.toString()),a.setAttribute("data-ad-height",o.toString()),a.setAttribute("data-ad-unit",r),n.appendChild(a),n.appendChild(c)},100);return()=>clearTimeout(n)},[e,r,o,t]),(0,s.jsx)("div",{style:n,children:(0,s.jsx)("div",{className:e})})}function t(){return(0,s.jsx)(o,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var i=r(6540);const s={},o=i.createContext(s);function t(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(o.Provider,{value:n},e.children)}},8829:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>f});const i=JSON.parse('{"id":"guides/subscription-offers","title":"Subscription Offers","description":"This guide explains how to handle subscription offers (pricing plans) when purchasing subscriptions on iOS and Android platforms.","source":"@site/docs/guides/subscription-offers.md","sourceDirName":"guides","slug":"/guides/subscription-offers","permalink":"/react-native-iap/docs/guides/subscription-offers","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/react-native-iap/tree/main/docs/docs/guides/subscription-offers.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Subscription Offers","sidebar_label":"Subscription Offers","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Purchase Lifecycle","permalink":"/react-native-iap/docs/guides/lifecycle"},"next":{"title":"Subscription Validation","permalink":"/react-native-iap/docs/guides/subscription-validation"}}');var s=r(4848),o=r(8453),t=r(571);const a={title:"Subscription Offers",sidebar_label:"Subscription Offers",sidebar_position:3},c="Subscription Offers",d={},f=[{value:"Overview",id:"overview",level:2},{value:"Platform Differences",id:"platform-differences",level:2},{value:"Android Subscription Offers",id:"android-subscription-offers",level:3},{value:"Required for Android Subscriptions",id:"required-for-android-subscriptions",level:4},{value:"Getting Offer Tokens",id:"getting-offer-tokens",level:4},{value:"Purchase with Offers",id:"purchase-with-offers",level:4},{value:"Understanding Offer Details",id:"understanding-offer-details",level:4},{value:"iOS Subscription Offers",id:"ios-subscription-offers",level:3},{value:"Introductory Offers (Automatic)",id:"introductory-offers-automatic",level:4},{value:"Base Plan (Default)",id:"base-plan-default",level:4},{value:"Promotional Offers (Optional)",id:"promotional-offers-optional",level:4},{value:"Server-Side Signature Generation",id:"server-side-signature-generation",level:5},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Selecting Specific Offers",id:"selecting-specific-offers",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Android Errors",id:"android-errors",level:3},{value:"iOS Errors",id:"ios-errors",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"See Also",id:"see-also",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"subscription-offers",children:"Subscription Offers"})}),"\n",(0,s.jsx)(t.A,{}),"\n",(0,s.jsx)(n.p,{children:"This guide explains how to handle subscription offers (pricing plans) when purchasing subscriptions on iOS and Android platforms."}),"\n",(0,s.jsxs)(n.p,{children:["For a complete implementation example, see the ",(0,s.jsx)(n.a,{href:"/react-native-iap/docs/examples/subscription-flow",children:"Subscription Flow Example"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Subscription offers represent different pricing plans for the same subscription product:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Base Plan"}),": The standard pricing for a subscription"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Introductory Offers"}),": Special pricing for new subscribers (free trial, discounted period)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Promotional Offers"}),": Limited-time discounts configured in the app stores"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"platform-differences",children:"Platform Differences"}),"\n",(0,s.jsx)(n.p,{children:"At a glance:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Android: subscription offers are required when purchasing subscriptions. You must pass ",(0,s.jsx)(n.code,{children:"subscriptionOffers"})," with one or more offer tokens from ",(0,s.jsx)(n.code,{children:"fetchProducts()"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["iOS: base plan is used by default. Promotional discounts are optional via ",(0,s.jsx)(n.code,{children:"withOffer"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Tip: Always fetch products first; offers only exist after ",(0,s.jsx)(n.code,{children:"fetchProducts({ type: 'subs' })"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"android-subscription-offers",children:"Android Subscription Offers"}),"\n",(0,s.jsxs)(n.p,{children:["Android requires explicit specification of subscription offers when purchasing. Each offer is identified by an ",(0,s.jsx)(n.code,{children:"offerToken"})," obtained from ",(0,s.jsx)(n.code,{children:"fetchProducts()"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"required-for-android-subscriptions",children:"Required for Android Subscriptions"}),"\n",(0,s.jsxs)(n.p,{children:["Unlike iOS, Android subscriptions ",(0,s.jsx)(n.strong,{children:"must"})," include ",(0,s.jsx)(n.code,{children:"subscriptionOffers"})," in the purchase request. Without it, the purchase will fail with:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"The number of skus (1) must match: the number of offerTokens (0)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"getting-offer-tokens",children:"Getting Offer Tokens"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import {useIAP} from 'react-native-iap';\n\nconst SubscriptionComponent = () => {\n  const {connected, subscriptions, fetchProducts, requestPurchase} = useIAP();\n\n  // 1) Fetch subscription products\n  useEffect(() => {\n    if (connected) {\n      fetchProducts({skus: ['premium_monthly'], type: 'subs'});\n    }\n  }, [connected]);\n\n  // 2) Access offer details from fetched subscriptions\n  const subscription = subscriptions.find((s) => s.id === 'premium_monthly');\n\n  if (subscription?.subscriptionOfferDetailsAndroid) {\n    console.log(\n      'Available offers:',\n      subscription.subscriptionOfferDetailsAndroid,\n    );\n    // Each offer contains: basePlanId, offerId?, offerTags, offerToken, pricingPhases\n  }\n};\n"})}),"\n",(0,s.jsx)(n.h4,{id:"purchase-with-offers",children:"Purchase with Offers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const purchaseSubscription = async (subscriptionId: string) => {\n  const subscription = subscriptions.find((s) => s.id === subscriptionId);\n  if (!subscription) return;\n\n  // Build subscriptionOffers from fetched data with proper filtering\n  const subscriptionOffers = (\n    subscription.subscriptionOfferDetailsAndroid ?? []\n  )\n    .map((offer) =>\n      offer?.offerToken\n        ? {\n            sku: subscriptionId,\n            offerToken: offer.offerToken,\n          }\n        : null,\n    )\n    .filter((offer): offer is {sku: string; offerToken: string} =>\n      Boolean(offer?.offerToken),\n    );\n\n  // Only proceed if offers are available\n  if (subscriptionOffers.length === 0) {\n    console.error('No subscription offers available');\n    return;\n  }\n\n  await requestPurchase({\n    request: {\n      ios: {sku: subscriptionId},\n      android: {\n        skus: [subscriptionId],\n        subscriptionOffers, // Now guaranteed to have valid offers\n      },\n    },\n    type: 'subs',\n  });\n};\n"})}),"\n",(0,s.jsx)(n.h4,{id:"understanding-offer-details",children:"Understanding Offer Details"}),"\n",(0,s.jsxs)(n.p,{children:["Each ",(0,s.jsx)(n.code,{children:"subscriptionOfferDetailsAndroid"})," item contains:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"interface ProductSubscriptionAndroidOfferDetails {\n  basePlanId: string; // Base plan identifier\n  offerId?: string | null; // Offer identifier (null for base plan)\n  offerTags: string[]; // Tags associated with the offer\n  offerToken: string; // Token required for purchase\n  pricingPhases: PricingPhasesAndroid; // Pricing information\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"ios-subscription-offers",children:"iOS Subscription Offers"}),"\n",(0,s.jsx)(n.p,{children:"iOS handles subscription offers differently - the base plan is used by default, and promotional offers are optional."}),"\n",(0,s.jsx)(n.h4,{id:"introductory-offers-automatic",children:"Introductory Offers (Automatic)"}),"\n",(0,s.jsxs)(n.p,{children:["iOS automatically applies introductory prices (free trials, pay-as-you-go, or pay-up-front) to eligible users when they purchase a subscription. ",(0,s.jsx)(n.strong,{children:"No additional code is needed"})," - the App Store handles this automatically based on your App Store Connect configuration."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Detecting Introductory Offers:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const subscription = subscriptions.find((s) => s.id === 'premium_monthly');\n\n// Check if this subscription has an introductory offer configured\nconst introOffer = subscription?.subscriptionInfoIOS?.introductoryOffer;\n\nif (introOffer) {\n  console.log('Introductory offer available:');\n  console.log('Type:', introOffer.type); // 'freeTrial' | 'introductory' | 'subscription'\n  console.log('Price:', introOffer.price); // e.g., 0 for free trial\n  console.log('Period:', introOffer.period); // Duration info\n  console.log('Payment Mode:', introOffer.paymentMode); // 'payAsYouGo' | 'payUpFront' | 'freeTrial'\n\n  // Display to user based on payment mode\n  switch (introOffer.paymentMode.toLowerCase()) {\n    case 'freetrial':\n      console.log(\n        `Free trial: ${introOffer.period.numberOfUnits} ${introOffer.period.unit.toLowerCase()}`,\n      );\n      break;\n    case 'payasyougo':\n      console.log(\n        `Introductory price: ${introOffer.price} for ${introOffer.period.numberOfUnits} ${introOffer.period.unit.toLowerCase()}`,\n      );\n      break;\n    case 'payupfront':\n      console.log(\n        `One-time payment: ${introOffer.price} for ${introOffer.period.numberOfUnits} ${introOffer.period.unit.toLowerCase()}`,\n      );\n      break;\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," Introductory offers are automatically applied when eligible. You cannot manually select or apply them - they're determined by the user's purchase history and your App Store Connect configuration."]}),"\n",(0,s.jsx)(n.h4,{id:"base-plan-default",children:"Base Plan (Default)"}),"\n",(0,s.jsx)(n.p,{children:"For standard subscription purchases, no special offer specification is needed:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"await requestPurchase({\n  request: {\n    ios: {sku: 'premium_monthly'},\n    android: {\n      skus: [\n        'premium_monthly',\n      ] /* include subscriptionOffers only if available */,\n    },\n  },\n  type: 'subs',\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"promotional-offers-optional",children:"Promotional Offers (Optional)"}),"\n",(0,s.jsxs)(n.p,{children:["iOS supports promotional offers through the ",(0,s.jsx)(n.code,{children:"withOffer"})," parameter. Unlike introductory offers, promotional offers require explicit activation and signature generation."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Getting Available Promotional Offers:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const subscription = subscriptions.find((s) => s.id === 'premium_monthly');\n\n// Check for available promotional offers\nconst promotionalOffers = subscription?.discountsIOS ?? [];\n\nif (promotionalOffers.length > 0) {\n  promotionalOffers.forEach((discount) => {\n    console.log('Promotional offer:', discount.identifier);\n    console.log('Price:', discount.price);\n    console.log('Type:', discount.type); // 'promotional' or 'introductory'\n  });\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Applying Promotional Offers:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"interface DiscountOfferInputIOS {\n  offerIdentifier: string; // From App Store Connect\n  keyIdentifier: string; // From App Store Connect\n  nonce: string; // UUID v4 (lowercase) - generated by your backend\n  signature: string; // Base64-encoded signature - generated by your backend\n  timestamp: number; // Unix timestamp in milliseconds - generated by your backend\n}\n\nconst purchaseWithPromotionalOffer = async (\n  subscriptionId: string,\n  offerIdentifier: string,\n) => {\n  // Step 1: Get the signature from your backend\n  const signatureData = await fetch('https://your-backend.com/generate-signature', {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify({\n      productId: subscriptionId,\n      offerIdentifier: offerIdentifier,\n      applicationUsername: 'user-123', // Optional user identifier\n    }),\n  }).then((res) => res.json());\n\n  // Step 2: Purchase with the promotional offer\n  await requestPurchase({\n    request: {\n      ios: {\n        sku: subscriptionId,\n        withOffer: {\n          offerIdentifier: offerIdentifier, // From App Store Connect\n          keyIdentifier: signatureData.keyIdentifier, // From your backend\n          nonce: signatureData.nonce, // From your backend\n          signature: signatureData.signature, // From your backend (base64)\n          timestamp: signatureData.timestamp, // From your backend\n        },\n      },\n      android: {skus: [subscriptionId], subscriptionOffers: [...]},\n    },\n    type: 'subs',\n  });\n};\n"})}),"\n",(0,s.jsx)(n.h5,{id:"server-side-signature-generation",children:"Server-Side Signature Generation"}),"\n",(0,s.jsxs)(n.p,{children:["Promotional offer signatures must be generated on your server and ",(0,s.jsx)(n.strong,{children:"must be base64-encoded"}),". Here's a complete example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Node.js server example\nconst crypto = require('crypto');\nconst {v4: uuidv4} = require('uuid');\n\nfunction generatePromotionalOfferSignature(\n  bundleId, // Your app's bundle identifier (e.g., \"com.example.app\")\n  productId, // Product identifier (e.g., \"premium_monthly\")\n  offerId, // Offer identifier from App Store Connect\n  applicationUsername, // User identifier (appAccountToken)\n  privateKey, // PKCS#8 PEM-formatted private key from App Store Connect\n  keyId, // Key ID from App Store Connect\n) {\n  // Generate nonce and timestamp\n  const nonce = uuidv4().toLowerCase(); // MUST be lowercase UUID\n  const timestamp = Date.now(); // Milliseconds since Unix epoch\n\n  // \u2b50 CRITICAL: Data must be joined in this exact order\n  const dataToSign = [\n    bundleId, // 1. App Bundle ID\n    keyId, // 2. Key Identifier\n    productId, // 3. Product Identifier\n    offerId, // 4. Offer Identifier\n    applicationUsername, // 5. Application Username (appAccountToken)\n    nonce, // 6. Nonce (lowercase UUID)\n    timestamp.toString(), // 7. Timestamp (milliseconds)\n  ].join('\\u2063'); // Join with invisible separator (U+2063)\n\n  // Sign the data with SHA-256\n  const sign = crypto.createSign('sha256');\n  sign.update(dataToSign);\n  const signatureBuffer = sign.sign({\n    key: privateKey,\n    format: 'pem',\n    type: 'pkcs8',\n  });\n\n  // \u2b50 CRITICAL: Signature MUST be base64-encoded\n  const base64Signature = signatureBuffer.toString('base64');\n\n  return {\n    identifier: offerId,\n    keyIdentifier: keyId,\n    nonce: nonce, // Lowercase UUID\n    signature: base64Signature, // Base64-encoded signature\n    timestamp: timestamp, // Milliseconds\n  };\n}\n\n// Usage example\napp.post('/generate-offer-signature', (req, res) => {\n  const {productId, offerId, applicationUsername} = req.body;\n\n  const signature = generatePromotionalOfferSignature(\n    process.env.APP_BUNDLE_ID, // From environment\n    productId,\n    offerId,\n    applicationUsername,\n    process.env.APPLE_PRIVATE_KEY, // PKCS#8 PEM private key\n    process.env.APPLE_KEY_ID, // From App Store Connect\n  );\n\n  res.json(signature);\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Important Notes:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Data Order"}),": The 7 fields MUST be joined in the exact order shown above (as per ",(0,s.jsx)(n.a,{href:"https://developer.apple.com/documentation/storekit/original_api_for_in-app_purchase/subscriptions_and_offers/generating_a_signature_for_promotional_offers",children:"Apple's documentation"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Nonce"}),": Must be a lowercase UUID v4 string"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Timestamp"}),": Must be in milliseconds (not seconds)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Signature"}),": Must be base64-encoded (not hex or raw)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Private Key"}),": Must be PKCS#8 PEM format from App Store Connect"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Separator"}),": Use Unicode character U+2063 (invisible separator)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Common Errors:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\"The data couldn't be read because it isn't in the correct format\" \u2192 Signature is not base64-encoded"}),"\n",(0,s.jsx)(n.li,{children:'"Invalid signature" \u2192 Incorrect data order or wrong separator'}),"\n",(0,s.jsx)(n.li,{children:'"Signature verification failed" \u2192 Wrong private key or key ID'}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"selecting-specific-offers",children:"Selecting Specific Offers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const selectOffer = (\n  subscription: ProductSubscription,\n  offerType: 'base' | 'introductory',\n) => {\n  if (Platform.OS === 'ios') {\n    // iOS: Return introductory offer if requested and available\n    if (offerType === 'introductory') {\n      return subscription.subscriptionInfoIOS?.introductoryOffer ?? null;\n    }\n    // Base plan doesn't need explicit selection\n    return null;\n  }\n\n  // Android: Select offer based on type\n  const offers = subscription.subscriptionOfferDetailsAndroid ?? [];\n\n  if (offerType === 'base') {\n    // Find base plan (no offerId)\n    return offers.find((offer) => !offer.offerId);\n  } else {\n    // Find introductory offer\n    return offers.find((offer) => offer.offerId?.includes('introductory'));\n  }\n};\n\nconst purchaseWithSelectedOffer = async (\n  subscriptionId: string,\n  offerType: 'base' | 'introductory' = 'base',\n) => {\n  const subscription = subscriptions.find((s) => s.id === subscriptionId);\n  if (!subscription) return;\n\n  const selectedOffer = selectOffer(subscription, offerType);\n\n  if (Platform.OS === 'android') {\n    const subscriptionOffers = selectedOffer\n      ? [\n          {\n            sku: subscriptionId,\n            offerToken: selectedOffer.offerToken,\n          },\n        ]\n      : [];\n\n    if (subscriptionOffers.length === 0) {\n      console.error('No suitable offer found');\n      return;\n    }\n\n    await requestPurchase({\n      request: {\n        ios: {sku: subscriptionId},\n        android: {\n          skus: [subscriptionId],\n          // Required for Android: include only when you found a valid offer\n          ...(subscriptionOffers.length > 0 && {subscriptionOffers}),\n        },\n      },\n      type: 'subs',\n    });\n  } else {\n    // iOS: Could add promotional offer logic here\n    await requestPurchase({\n      request: {\n        ios: {sku: subscriptionId},\n        android: {\n          skus: [\n            subscriptionId,\n          ] /* include subscriptionOffers only if available */,\n        },\n      },\n      type: 'subs',\n    });\n  }\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.h3,{id:"android-errors",children:"Android Errors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import {useIAP, ErrorCode} from 'react-native-iap';\n\nconst {requestPurchase} = useIAP({\n  onPurchaseError: (error) => {\n    // Check for specific error code\n    if (error.code === ErrorCode.SkuOfferMismatch) {\n      console.error('SKU and offer mismatch');\n      // Ensure subscriptionOffers is included and valid\n    }\n  },\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"ios-errors",children:"iOS Errors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import {useIAP, ErrorCode} from 'react-native-iap';\n\nconst {requestPurchase} = useIAP({\n  onPurchaseError: (error) => {\n    // Check for generic errors that may indicate offer issues\n    if (error.code === ErrorCode.Unknown) {\n      console.error('Invalid promotional offer for iOS');\n      // Check offerIdentifier, signature, etc.\n    }\n  },\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Always fetch products first"}),": Subscription offers are only available after ",(0,s.jsx)(n.code,{children:"fetchProducts()"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Handle platform differences"}),": Android requires offers, iOS makes them optional."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Validate offers"}),": Check that offers exist before attempting purchase."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"User selection"}),": Allow users to choose between different pricing plans when multiple offers are available."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Error recovery"}),": Provide fallback to base plan if selected offer fails."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../api/use-iap",children:"useIAP Hook"})," - Main API documentation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../examples/subscription-flow",children:"Subscription Flow Example"})," - Complete implementation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../api/error-codes",children:"Error Codes"})," - Purchase error handling"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);