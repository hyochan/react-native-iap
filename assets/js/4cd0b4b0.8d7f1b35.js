"use strict";(self.webpackChunkreact_native_iap_docs=self.webpackChunkreact_native_iap_docs||[]).push([[7280],{571:(n,e,s)=>{s.d(e,{A:()=>a});var r=s(6540),t=s(4848);function i({className:n="adfit",style:e,unit:s,height:i,width:a}){return(0,r.useEffect)(()=>{const e=setTimeout(()=>{const e=document.querySelector(`.${n}`);if(!e)return void console.warn(`AdFit: Element with class "${n}" not found`);const r=e.querySelectorAll(".kakao_ad_area"),t=e.querySelectorAll('script[src*="kas/static/ba.min.js"]');r.forEach(n=>n.remove()),t.forEach(n=>n.remove());const c=document.createElement("ins"),o=document.createElement("script");c.className="kakao_ad_area",c.style.cssText="display:none; width:100%;",o.async=!0,o.type="text/javascript",o.src="//t1.daumcdn.net/kas/static/ba.min.js",c.setAttribute("data-ad-width",a.toString()),c.setAttribute("data-ad-height",i.toString()),c.setAttribute("data-ad-unit",s),e.appendChild(c),e.appendChild(o)},100);return()=>clearTimeout(e)},[n,s,i,a]),(0,t.jsx)("div",{style:e,children:(0,t.jsx)("div",{className:n})})}function a(){return(0,t.jsx)(i,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},5931:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"examples/subscription-flow","title":"Subscriptions Flow Example","description":"This guide demonstrates practical subscription scenarios with react-native-iap.","source":"@site/docs/examples/subscription-flow.md","sourceDirName":"examples","slug":"/examples/subscription-flow","permalink":"/react-native-iap/docs/examples/subscription-flow","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/react-native-iap/tree/main/docs/docs/examples/subscription-flow.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Subscriptions Flow Example","sidebar_label":"Subscriptions Flow","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Purchase Flow","permalink":"/react-native-iap/docs/examples/purchase-flow"},"next":{"title":"Available Purchases","permalink":"/react-native-iap/docs/examples/available-purchases"}}');var t=s(4848),i=s(8453),a=s(571);const c={title:"Subscriptions Flow Example",sidebar_label:"Subscriptions Flow",sidebar_position:2},o="Subscriptions Flow",u={},l=[{value:"1. Purchasing a Subscription with <code>requestPurchase</code>",id:"1-purchasing-a-subscription-with-requestpurchase",level:2},{value:"Basic Subscription Purchase",id:"basic-subscription-purchase",level:3},{value:"Handling Purchase Success with Hook Callbacks",id:"handling-purchase-success-with-hook-callbacks",level:3},{value:"2. Checking Subscription Status with <code>getActiveSubscriptions</code>",id:"2-checking-subscription-status-with-getactivesubscriptions",level:2},{value:"Basic Status Check After Purchase",id:"basic-status-check-after-purchase",level:3},{value:"Checking Multiple Subscription Tiers",id:"checking-multiple-subscription-tiers",level:3},{value:"3. Subscription Plan Changes (Upgrade/Downgrade)",id:"3-subscription-plan-changes-upgradedowngrade",level:2},{value:"iOS: Automatic Subscription Group Management",id:"ios-automatic-subscription-group-management",level:3},{value:"Android: Manual Plan Changes with Purchase Token",id:"android-manual-plan-changes-with-purchase-token",level:3},{value:"4. Platform-Unified Subscription Change Handler",id:"4-platform-unified-subscription-change-handler",level:2},{value:"Key Points Summary",id:"key-points-summary",level:2},{value:"Purchase Flow",id:"purchase-flow",level:3},{value:"Platform Differences",id:"platform-differences",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"subscriptions-flow",children:"Subscriptions Flow"})}),"\n",(0,t.jsx)(a.A,{}),"\n",(0,t.jsx)(e.p,{children:"This guide demonstrates practical subscription scenarios with react-native-iap."}),"\n",(0,t.jsxs)(e.admonition,{type:"note",children:[(0,t.jsxs)(e.mdxAdmonitionTitle,{children:["The complete working example can be found at ",(0,t.jsx)(e.a,{href:"https://github.com/hyochan/react-native-iap/blob/main/example/screens/SubscriptionFlow.tsx",children:"example/screens/SubscriptionFlow.tsx"}),". Note that the example code was heavily vibe-coded with Claude and is quite verbose/messy for demonstration purposes - use it as a reference only. :::"]}),(0,t.jsxs)(e.h2,{id:"1-purchasing-a-subscription-with-requestpurchase",children:["1. Purchasing a Subscription with ",(0,t.jsx)(e.code,{children:"requestPurchase"})]}),(0,t.jsx)(e.h3,{id:"basic-subscription-purchase",children:"Basic Subscription Purchase"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"import {useIAP} from 'react-native-iap';\nimport {Platform} from 'react-native';\n\nfunction SubscriptionPurchase() {\n  const {connected, subscriptions, requestPurchase, fetchProducts} = useIAP();\n\n  useEffect(() => {\n    // Load subscription products\n    if (connected) {\n      fetchProducts({\n        skus: ['com.app.premium_monthly', 'com.app.premium_yearly'],\n        type: 'subs',\n      });\n    }\n  }, [connected]);\n\n  const purchaseSubscription = async (productId: string) => {\n    if (!connected) {\n      Alert.alert('Error', 'Store not connected');\n      return;\n    }\n\n    try {\n      // Find the subscription product\n      const subscription = subscriptions.find((sub) => sub.id === productId);\n      if (!subscription) {\n        throw new Error('Subscription not found');\n      }\n\n      // Platform-specific purchase request\n      await requestPurchase({\n        request: {\n          ios: {\n            sku: productId,\n            andDangerouslyFinishTransactionAutomatically: false,\n          },\n          android: {\n            skus: [productId],\n            // Android requires subscriptionOffers for subscriptions\n            subscriptionOffers:\n              subscription.subscriptionOfferDetailsAndroid?.map((offer) => ({\n                sku: subscription.id,\n                offerToken: offer.offerToken,\n              })) || [],\n          },\n        },\n        type: 'subs',\n      });\n\n      // Success handling is done in onPurchaseSuccess callback\n    } catch (error) {\n      console.error('Purchase failed:', error);\n      Alert.alert('Error', 'Failed to purchase subscription');\n    }\n  };\n\n  return (\n    <View>\n      {subscriptions.map((sub) => (\n        <TouchableOpacity\n          key={sub.id}\n          onPress={() => purchaseSubscription(sub.id)}\n        >\n          <Text>\n            {sub.title} - {sub.localizedPrice}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n  );\n}\n"})}),(0,t.jsx)(e.h3,{id:"handling-purchase-success-with-hook-callbacks",children:"Handling Purchase Success with Hook Callbacks"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"import {useIAP, ErrorCode} from 'react-native-iap';\n\nfunction SubscriptionManager() {\n  const [activeSubscription, setActiveSubscription] = useState(null);\n\n  const {connected, subscriptions, requestPurchase, finishTransaction} = useIAP(\n    {\n      onPurchaseSuccess: async (purchase) => {\n        console.log('Purchase successful:', purchase.productId);\n\n        // Validate with your server\n        const isValid = await validatePurchaseOnServer(purchase);\n\n        if (isValid) {\n          // Update local state\n          setActiveSubscription(purchase.productId);\n\n          // Finish the transaction\n          await finishTransaction({purchase});\n\n          Alert.alert('Success', 'Subscription activated!');\n        }\n      },\n      onPurchaseError: (error) => {\n        if (error.code !== ErrorCode.UserCancelled) {\n          Alert.alert('Error', error.message);\n        }\n      },\n    },\n  );\n\n  // Purchase function remains simple\n  const subscribe = async (productId: string) => {\n    const subscription = subscriptions.find((s) => s.id === productId);\n    if (!subscription) return;\n\n    await requestPurchase({\n      request: {\n        ios: {\n          sku: productId,\n          andDangerouslyFinishTransactionAutomatically: false,\n        },\n        android: {\n          skus: [productId],\n          subscriptionOffers:\n            subscription.subscriptionOfferDetailsAndroid?.map((offer) => ({\n              sku: subscription.id,\n              offerToken: offer.offerToken,\n            })) || [],\n        },\n      },\n      type: 'subs',\n    });\n    // Don't handle success here - use onPurchaseSuccess callback\n  };\n}\n"})}),(0,t.jsxs)(e.h2,{id:"2-checking-subscription-status-with-getactivesubscriptions",children:["2. Checking Subscription Status with ",(0,t.jsx)(e.code,{children:"getActiveSubscriptions"})]}),(0,t.jsx)(e.h3,{id:"basic-status-check-after-purchase",children:"Basic Status Check After Purchase"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"import {useIAP} from 'react-native-iap';\nimport {Platform} from 'react-native';\n\nfunction useSubscriptionStatus() {\n  const {getActiveSubscriptions} = useIAP();\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  const [subscriptionDetails, setSubscriptionDetails] = useState(null);\n\n  const checkSubscriptionStatus = async () => {\n    try {\n      // Get active subscriptions - returns array of active subscriptions\n      const activeSubscriptions = await getActiveSubscriptions();\n\n      if (activeSubscriptions.length > 0) {\n        // User has at least one active subscription\n        setIsSubscribed(true);\n\n        // Check specific subscription details\n        const subscription = activeSubscriptions[0];\n\n        // Platform-specific status checks\n        if (Platform.OS === 'ios') {\n          // iOS provides expirationDateIos\n          const isExpired = subscription.expirationDateIos < Date.now();\n          setSubscriptionDetails({\n            productId: subscription.productId,\n            isActive: !isExpired,\n            expiresAt: new Date(subscription.expirationDateIos),\n            environment: subscription.environmentIOS, // 'Production' or 'Sandbox'\n          });\n        } else {\n          // Android provides autoRenewingAndroid\n          setSubscriptionDetails({\n            productId: subscription.productId,\n            isActive: subscription.autoRenewingAndroid,\n            willAutoRenew: subscription.autoRenewingAndroid,\n            purchaseState: subscription.purchaseStateAndroid, // 0 = purchased, 1 = canceled\n          });\n        }\n      } else {\n        setIsSubscribed(false);\n        setSubscriptionDetails(null);\n      }\n    } catch (error) {\n      console.error('Failed to check subscription status:', error);\n    }\n  };\n\n  return {isSubscribed, subscriptionDetails, checkSubscriptionStatus};\n}\n"})}),(0,t.jsx)(e.h3,{id:"checking-multiple-subscription-tiers",children:"Checking Multiple Subscription Tiers"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"const SUBSCRIPTION_SKUS = {\n  BASIC: 'com.app.basic_monthly',\n  PREMIUM: 'com.app.premium_monthly',\n  PREMIUM_YEARLY: 'com.app.premium_yearly',\n};\n\nasync function getUserSubscriptionTier() {\n  const {getActiveSubscriptions} = useIAP();\n\n  try {\n    const activeSubscriptions = await getActiveSubscriptions();\n\n    // Check for premium yearly first (highest tier)\n    const yearlyPremium = activeSubscriptions.find(\n      (sub) => sub.productId === SUBSCRIPTION_SKUS.PREMIUM_YEARLY,\n    );\n    if (yearlyPremium) return 'PREMIUM_YEARLY';\n\n    // Then check monthly premium\n    const monthlyPremium = activeSubscriptions.find(\n      (sub) => sub.productId === SUBSCRIPTION_SKUS.PREMIUM,\n    );\n    if (monthlyPremium) return 'PREMIUM';\n\n    // Finally check basic\n    const basic = activeSubscriptions.find(\n      (sub) => sub.productId === SUBSCRIPTION_SKUS.BASIC,\n    );\n    if (basic) return 'BASIC';\n\n    return 'FREE';\n  } catch (error) {\n    console.error('Failed to get subscription tier:', error);\n    return 'FREE';\n  }\n}\n"})}),(0,t.jsx)(e.h2,{id:"3-subscription-plan-changes-upgradedowngrade",children:"3. Subscription Plan Changes (Upgrade/Downgrade)"}),(0,t.jsx)(e.h3,{id:"ios-automatic-subscription-group-management",children:"iOS: Automatic Subscription Group Management"}),(0,t.jsx)(e.p,{children:"On iOS, subscriptions in the same subscription group automatically replace each other when purchased. The App Store handles the proration and timing automatically."}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"// iOS Subscription Configuration in App Store Connect:\n// Subscription Group: \"Premium Access\"\n// - com.app.premium_monthly (Rank 1)\n// - com.app.premium_yearly (Rank 2 - higher rank = better value)\n\nasync function handleIOSSubscriptionChange(newProductId: string) {\n  const {requestPurchase, getActiveSubscriptions} = useIAP();\n\n  try {\n    // Check current subscription\n    const currentSubs = await getActiveSubscriptions();\n    const currentSub = currentSubs.find(\n      (sub) =>\n        sub.productId === 'com.app.premium_monthly' ||\n        sub.productId === 'com.app.premium_yearly',\n    );\n\n    if (currentSub) {\n      console.log(`Changing from ${currentSub.productId} to ${newProductId}`);\n      // iOS automatically handles the switch when both products are in the same group\n    }\n\n    // Simply purchase the new subscription\n    // iOS will automatically:\n    // 1. Cancel the old subscription at the end of the current period\n    // 2. Start the new subscription\n    // 3. Handle any necessary proration\n    await requestPurchase({\n      request: {\n        ios: {\n          sku: newProductId,\n          andDangerouslyFinishTransactionAutomatically: false,\n        },\n        android: {\n          skus: [newProductId],\n        },\n      },\n      type: 'subs',\n    });\n\n    Alert.alert(\n      'Subscription Updated',\n      'Your subscription will change at the end of the current billing period.',\n    );\n  } catch (error) {\n    console.error('Subscription change failed:', error);\n  }\n}\n\n// Usage example\nfunction IOSSubscriptionManager() {\n  const handleUpgradeToYearly = () => {\n    handleIOSSubscriptionChange('com.app.premium_yearly');\n  };\n\n  const handleDowngradeToMonthly = () => {\n    handleIOSSubscriptionChange('com.app.premium_monthly');\n  };\n\n  return (\n    <View>\n      <Text>iOS subscriptions in the same group auto-replace each other</Text>\n      <Button title=\"Upgrade to Yearly\" onPress={handleUpgradeToYearly} />\n      <Button title=\"Switch to Monthly\" onPress={handleDowngradeToMonthly} />\n    </View>\n  );\n}\n"})}),(0,t.jsx)(e.h3,{id:"android-manual-plan-changes-with-purchase-token",children:"Android: Manual Plan Changes with Purchase Token"}),(0,t.jsx)(e.p,{children:"On Android, you need to explicitly handle subscription upgrades/downgrades using the purchase token from the existing subscription."}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"async function handleAndroidSubscriptionChange(\n  newProductId: string,\n  changeType: 'upgrade' | 'downgrade',\n) {\n  const {requestPurchase, getAvailablePurchases, subscriptions} = useIAP();\n\n  try {\n    // Step 1: Get the current subscription's purchase token\n    await getAvailablePurchases();\n    const currentPurchase = availablePurchases.find(\n      (p) =>\n        p.productId === 'com.app.premium_monthly' ||\n        p.productId === 'com.app.premium_yearly',\n    );\n\n    if (!currentPurchase?.purchaseToken) {\n      throw new Error('No active subscription found');\n    }\n\n    // Step 2: Find the new subscription product\n    const newSubscription = subscriptions.find(\n      (sub) => sub.id === newProductId,\n    );\n    if (!newSubscription) {\n      throw new Error('New subscription product not found');\n    }\n\n    // Step 3: Prepare subscription offers\n    const subscriptionOffers = (\n      newSubscription.subscriptionOfferDetailsAndroid ?? []\n    ).map((offer) => ({\n      sku: newSubscription.id,\n      offerToken: offer.offerToken,\n    }));\n\n    // Step 4: Request purchase with the old purchase token for replacement\n    await requestPurchase({\n      request: {\n        ios: {\n          sku: newProductId,\n        },\n        android: {\n          skus: [newProductId],\n          subscriptionOffers,\n          // IMPORTANT: Include purchase token for subscription replacement\n          purchaseTokenAndroid: currentPurchase.purchaseToken,\n          // Optional: Specify proration mode\n          replacementModeAndroid:\n            changeType === 'upgrade'\n              ? 'IMMEDIATE_WITH_TIME_PRORATION'\n              : 'DEFERRED', // Downgrade happens at next renewal\n        },\n      },\n      type: 'subs',\n    });\n\n    const message =\n      changeType === 'upgrade'\n        ? 'Subscription upgraded immediately!'\n        : 'Subscription will change at the end of current period.';\n\n    Alert.alert('Success', message);\n  } catch (error) {\n    console.error('Android subscription change failed:', error);\n    Alert.alert('Error', 'Failed to change subscription plan');\n  }\n}\n\n// Complete Android Example with UI\nfunction AndroidSubscriptionManager() {\n  const {subscriptions, getAvailablePurchases, availablePurchases} = useIAP();\n  const [currentPlan, setCurrentPlan] = useState<string | null>(null);\n\n  useEffect(() => {\n    checkCurrentPlan();\n  }, []);\n\n  const checkCurrentPlan = async () => {\n    try {\n      await getAvailablePurchases();\n      const activeSub = availablePurchases.find(\n        (p) =>\n          p.productId === 'com.app.premium_monthly' ||\n          p.productId === 'com.app.premium_yearly',\n      );\n      setCurrentPlan(activeSub?.productId || null);\n    } catch (error) {\n      console.error('Failed to check current plan:', error);\n    }\n  };\n\n  const handlePlanChange = (targetPlan: string) => {\n    if (!currentPlan) {\n      // New subscription\n      purchaseNewSubscription(targetPlan);\n    } else if (\n      currentPlan === 'com.app.premium_monthly' &&\n      targetPlan === 'com.app.premium_yearly'\n    ) {\n      // Upgrade to yearly\n      handleAndroidSubscriptionChange(targetPlan, 'upgrade');\n    } else if (\n      currentPlan === 'com.app.premium_yearly' &&\n      targetPlan === 'com.app.premium_monthly'\n    ) {\n      // Downgrade to monthly\n      handleAndroidSubscriptionChange(targetPlan, 'downgrade');\n    }\n  };\n\n  return (\n    <View>\n      <Text>Current Plan: {currentPlan || 'None'}</Text>\n\n      {currentPlan === 'com.app.premium_monthly' && (\n        <Button\n          title=\"\u2b06\ufe0f Upgrade to Yearly (Save 20%)\"\n          onPress={() => handlePlanChange('com.app.premium_yearly')}\n        />\n      )}\n\n      {currentPlan === 'com.app.premium_yearly' && (\n        <Button\n          title=\"\u2b07\ufe0f Switch to Monthly\"\n          onPress={() => handlePlanChange('com.app.premium_monthly')}\n        />\n      )}\n    </View>\n  );\n}\n"})}),(0,t.jsx)(e.h2,{id:"4-platform-unified-subscription-change-handler",children:"4. Platform-Unified Subscription Change Handler"}),(0,t.jsx)(e.p,{children:"Here's a complete example that handles both platforms appropriately:"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"function SubscriptionPlanManager() {\n  const {\n    requestPurchase,\n    getActiveSubscriptions,\n    getAvailablePurchases,\n    subscriptions,\n    availablePurchases,\n  } = useIAP();\n\n  const handleSubscriptionChange = async (newProductId: string) => {\n    try {\n      if (Platform.OS === 'ios') {\n        // iOS: Simple purchase - automatic replacement in same group\n        await requestPurchase({\n          request: {\n            ios: {\n              sku: newProductId,\n              andDangerouslyFinishTransactionAutomatically: false,\n            },\n            android: {\n              skus: [newProductId],\n            },\n          },\n          type: 'subs',\n        });\n\n        Alert.alert(\n          'Subscription Updated',\n          'Your plan will change at the end of the current period.',\n        );\n      } else {\n        // Android: Need purchase token for replacement\n        await getAvailablePurchases();\n\n        // Find current subscription\n        const currentPurchase = availablePurchases.find((p) =>\n          p.productId.includes('premium'),\n        );\n\n        // Find new subscription details\n        const newSub = subscriptions.find((s) => s.id === newProductId);\n\n        if (currentPurchase?.purchaseToken && newSub) {\n          // Prepare offers\n          const offers = (newSub.subscriptionOfferDetailsAndroid ?? []).map(\n            (offer) => ({\n              sku: newSub.id,\n              offerToken: offer.offerToken,\n            }),\n          );\n\n          // Purchase with replacement\n          await requestPurchase({\n            request: {\n              ios: {\n                sku: newProductId,\n              },\n              android: {\n                skus: [newProductId],\n                subscriptionOffers: offers,\n                purchaseTokenAndroid: currentPurchase.purchaseToken,\n              },\n            },\n            type: 'subs',\n          });\n\n          Alert.alert('Success', 'Subscription plan changed!');\n        } else {\n          // New subscription (no existing one)\n          const offers = (newSub?.subscriptionOfferDetailsAndroid ?? []).map(\n            (offer) => ({\n              sku: newSub.id,\n              offerToken: offer.offerToken,\n            }),\n          );\n\n          await requestPurchase({\n            request: {\n              ios: {\n                sku: newProductId,\n              },\n              android: {\n                skus: [newProductId],\n                subscriptionOffers: offers,\n              },\n            },\n            type: 'subs',\n          });\n        }\n      }\n\n      // Refresh subscription status\n      await getActiveSubscriptions();\n    } catch (error) {\n      console.error('Subscription change error:', error);\n      Alert.alert('Error', 'Failed to change subscription');\n    }\n  };\n\n  return (\n    <View>\n      <Text style={styles.title}>Choose Your Plan</Text>\n\n      <TouchableOpacity\n        style={styles.planCard}\n        onPress={() => handleSubscriptionChange('com.app.premium_monthly')}\n      >\n        <Text>Monthly - $9.99/month</Text>\n      </TouchableOpacity>\n\n      <TouchableOpacity\n        style={[styles.planCard, styles.recommended]}\n        onPress={() => handleSubscriptionChange('com.app.premium_yearly')}\n      >\n        <Text>Yearly - $99.99/year (Save $20!)</Text>\n      </TouchableOpacity>\n\n      <Text style={styles.note}>\n        {Platform.OS === 'ios'\n          ? '\u2713 Changes take effect at the end of current period'\n          : '\u2713 Upgrades apply immediately with proration'}\n      </Text>\n    </View>\n  );\n}\n"})}),(0,t.jsx)(e.h2,{id:"key-points-summary",children:"Key Points Summary"}),(0,t.jsx)(e.h3,{id:"purchase-flow",children:"Purchase Flow"}),(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Always use hook callbacks"})," (",(0,t.jsx)(e.code,{children:"onPurchaseSuccess"}),", ",(0,t.jsx)(e.code,{children:"onPurchaseError"}),") for handling results"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsxs)(e.strong,{children:["Don't chain ",(0,t.jsx)(e.code,{children:".then()"})," on ",(0,t.jsx)(e.code,{children:"requestPurchase"})," promise"]})," - it can fire at the wrong time"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsxs)(e.strong,{children:["Android requires ",(0,t.jsx)(e.code,{children:"subscriptionOffers"})]})," array with offer tokens for subscription purchases"]}),"\n"]}),(0,t.jsx)(e.h3,{id:"platform-differences",children:"Platform Differences"}),(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:"Feature"}),(0,t.jsx)(e.th,{children:"iOS"}),(0,t.jsx)(e.th,{children:"Android"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.strong,{children:"Plan Changes"})}),(0,t.jsx)(e.td,{children:"Automatic within subscription group"}),(0,t.jsx)(e.td,{children:"Manual with purchaseToken"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.strong,{children:"Proration"})}),(0,t.jsx)(e.td,{children:"Handled by App Store"}),(0,t.jsx)(e.td,{children:"Configurable via replacementModeAndroid"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.strong,{children:"Status Check"})}),(0,t.jsx)(e.td,{children:"Check expirationDateIos"}),(0,t.jsx)(e.td,{children:"Check autoRenewingAndroid"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.strong,{children:"Cancellation"})}),(0,t.jsx)(e.td,{children:"User manages in Settings"}),(0,t.jsx)(e.td,{children:"Check autoRenewingAndroid === false"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.strong,{children:"Multiple Plans"})}),(0,t.jsx)(e.td,{children:"Use subscription groups with ranks"}),(0,t.jsx)(e.td,{children:"Use base plans and offers"})]})]})]}),(0,t.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Always validate on server"}),": Client-side checks are for UI only"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Handle grace periods"}),": Check for billing issues before removing access"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Use hook callbacks"}),": Don't rely on promise resolution for state updates"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Clear messaging"}),": Explain when changes take effect"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Test thoroughly"}),": Use sandbox/test accounts for both platforms"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Store state properly"}),": Cache subscription status to reduce API calls"]}),"\n"]}),(0,t.jsx)(e.h2,{id:"additional-resources",children:"Additional Resources"}),(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://github.com/hyochan/react-native-iap/blob/main/example/screens/SubscriptionFlow.tsx",children:"Complete working example"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://developer.apple.com/app-store/subscriptions/",children:"iOS Subscription Groups Documentation"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://developer.android.com/google/play/billing/subscriptions#upgrade-downgrade",children:"Android Subscription Upgrade/Downgrade"})}),"\n"]})]})]})}function p(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>a,x:()=>c});var r=s(6540);const t={},i=r.createContext(t);function a(n){const e=r.useContext(i);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);