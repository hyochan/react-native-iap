"use strict";(self.webpackChunkreact_native_iap_docs=self.webpackChunkreact_native_iap_docs||[]).push([[3266],{264:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"guides/alternative-billing","title":"Alternative Billing","description":"This guide explains how to implement alternative billing functionality in your app using react-native-iap, allowing you to use external payment systems alongside or instead of the App Store/Google Play billing.","source":"@site/docs/guides/alternative-billing.md","sourceDirName":"guides","slug":"/guides/alternative-billing","permalink":"/react-native-iap/docs/guides/alternative-billing","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/react-native-iap/tree/main/docs/docs/guides/alternative-billing.md","tags":[],"version":"current","sidebarPosition":3.5,"frontMatter":{"title":"Alternative Billing","sidebar_label":"Alternative Billing","sidebar_position":3.5},"sidebar":"tutorialSidebar","previous":{"title":"Offer Code Redemption","permalink":"/react-native-iap/docs/guides/offer-code-redemption"},"next":{"title":"Error Handling","permalink":"/react-native-iap/docs/guides/error-handling"}}');var r=i(4848),t=i(8453),s=i(571);const o={title:"Alternative Billing",sidebar_label:"Alternative Billing",sidebar_position:3.5},a="Alternative Billing",c={},d=[{value:"Official Documentation",id:"official-documentation",level:2},{value:"Apple (iOS)",id:"apple-ios",level:3},{value:"Google Play (Android)",id:"google-play-android",level:3},{value:"Platform Updates (2024)",id:"platform-updates-2024",level:3},{value:"iOS",id:"ios",level:4},{value:"Android",id:"android",level:4},{value:"Overview",id:"overview",level:2},{value:"iOS Alternative Billing (External Purchase URLs)",id:"ios-alternative-billing-external-purchase-urls",level:2},{value:"Configuration (Expo Projects)",id:"configuration-expo-projects",level:3},{value:"Configuration (React Native CLI)",id:"configuration-react-native-cli",level:3},{value:"iOS API Usage",id:"ios-api-usage",level:3},{value:"Check Notice Sheet Availability (iOS 18.2+)",id:"check-notice-sheet-availability-ios-182",level:4},{value:"Present Notice Sheet (iOS 18.2+)",id:"present-notice-sheet-ios-182",level:4},{value:"Present External Purchase Link (iOS 16.0+)",id:"present-external-purchase-link-ios-160",level:4},{value:"Complete iOS Example",id:"complete-ios-example",level:3},{value:"Important iOS Notes",id:"important-ios-notes",level:3},{value:"Android Alternative Billing",id:"android-alternative-billing",level:2},{value:"Configuring Alternative Billing Mode",id:"configuring-alternative-billing-mode",level:3},{value:"Mode 1: Alternative Billing Only",id:"mode-1-alternative-billing-only",level:3},{value:"Mode 2: User Choice Billing",id:"mode-2-user-choice-billing",level:3},{value:"User Choice Billing Event Listener",id:"user-choice-billing-event-listener",level:3},{value:"Complete Cross-Platform Example",id:"complete-cross-platform-example",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"General",id:"general",level:3},{value:"iOS Specific",id:"ios-specific",level:3},{value:"Android Specific",id:"android-specific",level:3},{value:"Testing",id:"testing",level:2},{value:"iOS Testing",id:"ios-testing",level:3},{value:"Android Testing",id:"android-testing",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"iOS Issues",id:"ios-issues",level:3},{value:"&quot;Feature not supported&quot;",id:"feature-not-supported",level:4},{value:"&quot;External URL not opening&quot;",id:"external-url-not-opening",level:4},{value:"&quot;User stuck on external site&quot;",id:"user-stuck-on-external-site",level:4},{value:"Android Issues",id:"android-issues",level:3},{value:"&quot;Alternative billing not available&quot;",id:"alternative-billing-not-available",level:4},{value:"&quot;Token creation failed&quot;",id:"token-creation-failed",level:4},{value:"&quot;User choice dialog not showing&quot;",id:"user-choice-dialog-not-showing",level:4},{value:"Platform Requirements",id:"platform-requirements",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"See Also",id:"see-also",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"alternative-billing",children:"Alternative Billing"})}),"\n",(0,r.jsx)(s.A,{}),"\n",(0,r.jsx)(n.p,{children:"This guide explains how to implement alternative billing functionality in your app using react-native-iap, allowing you to use external payment systems alongside or instead of the App Store/Google Play billing."}),"\n",(0,r.jsx)(n.h2,{id:"official-documentation",children:"Official Documentation"}),"\n",(0,r.jsx)(n.h3,{id:"apple-ios",children:"Apple (iOS)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://developer.apple.com/documentation/storekit/external-purchase",children:"StoreKit External Purchase Documentation"})," - Official StoreKit external purchase API reference"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://developer.apple.com/documentation/bundleresources/entitlements/com.apple.developer.storekit.external-purchase-link",children:"External Purchase Link Entitlement"})," - Entitlement configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://developer.apple.com/documentation/storekit/externalpurchasecustomlink",children:"ExternalPurchaseCustomLink API"})," - Custom link API documentation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.openiap.dev/docs/external-purchase",children:"OpenIAP External Purchase"})," - OpenIAP external purchase specification"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"google-play-android",children:"Google Play (Android)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://developer.android.com/google/play/billing/alternative",children:"Alternative Billing APIs"})," - Official Android alternative billing API guide"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://support.google.com/googleplay/android-developer/answer/13821247",children:"User Choice Billing Overview"})," - Understanding user choice billing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://support.google.com/googleplay/android-developer/answer/12570971",children:"User Choice Billing Pilot"})," - Enrollment and setup"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://support.google.com/googleplay/android-developer/answer/10281818",children:"Payments Policy"})," - Google Play's payment policy"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://developer.android.com/google/play/billing/alternative/interim-ux/user-choice",children:"UX Guidelines (User Choice)"})," - User choice billing UX guidelines"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://developer.android.com/google/play/billing/alternative/interim-ux/billing-choice",children:"UX Guidelines (Alternative Billing)"})," - Alternative billing UX guidelines"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://support.google.com/googleplay/android-developer/answer/12348241",children:"EEA Alternative Billing"})," - European Economic Area specific guidance"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"platform-updates-2024",children:"Platform Updates (2024)"}),"\n",(0,r.jsx)(n.h4,{id:"ios",children:"iOS"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"US apps can use StoreKit External Purchase Link Entitlement"}),"\n",(0,r.jsx)(n.li,{children:"System disclosure sheet shown each time external link is accessed"}),"\n",(0,r.jsx)(n.li,{children:"Commission: 27% (reduced from 30%) for first year, 12% for subsequent years"}),"\n",(0,r.jsx)(n.li,{children:"EU apps have additional flexibility for external purchases"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"android",children:"Android"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"As of March 13, 2024: Alternative billing APIs must be used (manual reporting deprecated)"}),"\n",(0,r.jsx)(n.li,{children:"Service fee reduced by 4% when using alternative billing (e.g., 15% \u2192 11%)"}),"\n",(0,r.jsx)(n.li,{children:"Available in South Korea, India, and EEA"}),"\n",(0,r.jsx)(n.li,{children:"Gaming and non-gaming apps eligible (varies by region)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Alternative billing enables developers to offer payment options outside of the platform's standard billing systems:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS"}),": Redirect users to external websites for payment (iOS 16.0+)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Android"}),": Use Google Play's alternative billing options (requires approval)"]}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{title:"Platform Approval Required",type:"warning",children:[(0,r.jsx)(n.p,{children:"Both platforms require special approval to use alternative billing:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS"}),": Must be approved for external purchase entitlement"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Android"}),": Must be approved for alternative billing in Google Play Console"]}),"\n"]})]}),"\n",(0,r.jsx)(n.h2,{id:"ios-alternative-billing-external-purchase-urls",children:"iOS Alternative Billing (External Purchase URLs)"}),"\n",(0,r.jsx)(n.p,{children:"On iOS, alternative billing works by redirecting users to an external website where they complete the purchase."}),"\n",(0,r.jsx)(n.h3,{id:"configuration-expo-projects",children:"Configuration (Expo Projects)"}),"\n",(0,r.jsxs)(n.p,{children:["For Expo projects, configure iOS alternative billing in your ",(0,r.jsx)(n.code,{children:"app.config.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export default {\n  // ... other config\n  plugins: [\n    [\n      'react-native-iap',\n      {\n        iosAlternativeBilling: {\n          // Required: Countries where external purchases are supported (ISO 3166-1 alpha-2)\n          countries: ['kr', 'nl', 'de', 'fr', 'it', 'es'],\n\n          // Optional: External purchase URLs per country (iOS 15.4+)\n          links: {\n            kr: 'https://your-site.com/kr/checkout',\n            nl: 'https://your-site.com/nl/checkout',\n            de: 'https://your-site.com/de/checkout',\n          },\n\n          // Optional: Multiple URLs per country (iOS 17.5+, up to 5)\n          multiLinks: {\n            fr: [\n              'https://your-site.com/fr',\n              'https://your-site.com/global-sale',\n            ],\n            it: ['https://your-site.com/global-sale'],\n          },\n\n          // Optional: Custom link regions (iOS 18.1+)\n          customLinkRegions: ['de', 'fr', 'nl'],\n\n          // Optional: Streaming regions for music apps (iOS 18.2+)\n          streamingLinkRegions: ['at', 'de', 'fr', 'nl', 'is', 'no'],\n\n          // Enable external purchase link entitlement\n          enableExternalPurchaseLink: true,\n\n          // Enable streaming entitlement (music apps only)\n          enableExternalPurchaseLinkStreaming: false,\n        },\n      },\n    ],\n  ],\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"This automatically adds the required configuration to your iOS app:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Entitlements:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<plist>\n<dict>\n    \x3c!-- Automatically added when countries are specified --\x3e\n    <key>com.apple.developer.storekit.external-purchase</key>\n    <true/>\n\n    \x3c!-- Added when enableExternalPurchaseLink is true --\x3e\n    <key>com.apple.developer.storekit.external-purchase-link</key>\n    <true/>\n\n    \x3c!-- Added when enableExternalPurchaseLinkStreaming is true --\x3e\n    <key>com.apple.developer.storekit.external-purchase-link-streaming</key>\n    <true/>\n</dict>\n</plist>\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Info.plist:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<plist>\n<dict>\n    \x3c!-- Countries where external purchases are supported --\x3e\n    <key>SKExternalPurchase</key>\n    <array>\n        <string>kr</string>\n        <string>nl</string>\n        <string>de</string>\n    </array>\n\n    \x3c!-- External purchase URLs (optional) --\x3e\n    <key>SKExternalPurchaseLink</key>\n    <dict>\n        <key>kr</key>\n        <string>https://your-site.com/kr/checkout</string>\n    </dict>\n\n    \x3c!-- Multiple URLs per country (optional) --\x3e\n    <key>SKExternalPurchaseMultiLink</key>\n    <dict>\n        <key>fr</key>\n        <array>\n            <string>https://your-site.com/fr</string>\n            <string>https://your-site.com/global-sale</string>\n        </array>\n    </dict>\n</dict>\n</plist>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"configuration-react-native-cli",children:"Configuration (React Native CLI)"}),"\n",(0,r.jsx)(n.p,{children:"For React Native CLI projects, manually add the entitlements and Info.plist configuration shown above to your iOS project."}),"\n",(0,r.jsxs)(n.admonition,{title:"Requirements",type:"warning",children:[(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Approval Required"}),": You must obtain approval from Apple to use external purchase features"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"URL Format"}),": URLs must use HTTPS, have no query parameters, and be 1,000 characters or fewer"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Link Limits"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Music streaming apps: up to 5 links per country (EU + Iceland, Norway)"}),"\n",(0,r.jsx)(n.li,{children:"Other apps: 1 link per country"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Supported Regions"}),": Different features support different regions (EU, US, etc.)"]}),"\n"]}),(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"https://developer.apple.com/documentation/bundleresources/entitlements/com.apple.developer.storekit.external-purchase-link",children:"External Purchase Link Entitlement"})," for details."]})]}),"\n",(0,r.jsx)(n.h3,{id:"ios-api-usage",children:"iOS API Usage"}),"\n",(0,r.jsx)(n.h4,{id:"check-notice-sheet-availability-ios-182",children:"Check Notice Sheet Availability (iOS 18.2+)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import {canPresentExternalPurchaseNoticeIOS} from 'react-native-iap';\n\nconst canPresent = await canPresentExternalPurchaseNoticeIOS();\nif (canPresent) {\n  // Device supports notice sheets\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"present-notice-sheet-ios-182",children:"Present Notice Sheet (iOS 18.2+)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import {presentExternalPurchaseNoticeSheetIOS} from 'react-native-iap';\n\nconst result = await presentExternalPurchaseNoticeSheetIOS();\n\nif (result.result === 'continue') {\n  // User chose to continue - proceed to external purchase\n  console.log('User accepted notice');\n} else if (result.result === 'cancel') {\n  console.log('User cancelled');\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"present-external-purchase-link-ios-160",children:"Present External Purchase Link (iOS 16.0+)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import {presentExternalPurchaseLinkIOS} from 'react-native-iap';\n\nconst result = await presentExternalPurchaseLinkIOS(\n  'https://your-website.com/purchase',\n);\n\nif (result.success) {\n  console.log('User was redirected to external website');\n  // Complete purchase on your website\n  // Implement deep link to return to app\n} else if (result.error) {\n  console.error('Error:', result.error);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"complete-ios-example",children:"Complete iOS Example"}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"https://github.com/hyochan/react-native-iap/blob/main/example/screens/AlternativeBilling.tsx",children:"AlternativeBilling.tsx"})," for a complete working example that includes:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Notice sheet handling (iOS 18.2+)"}),"\n",(0,r.jsx)(n.li,{children:"External purchase link presentation"}),"\n",(0,r.jsx)(n.li,{children:"Error handling and user feedback"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"important-ios-notes",children:"Important iOS Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS 16.0+ Required"}),": External purchase links only work on iOS 16.0 and later"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"No Purchase Callback"}),": The ",(0,r.jsx)(n.code,{children:"purchaseUpdatedListener"})," will NOT fire when using external URLs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Deep Link Required"}),": Implement deep linking to return users to your app after purchase"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Manual Validation"}),": You must validate purchases on your backend server"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"android-alternative-billing",children:"Android Alternative Billing"}),"\n",(0,r.jsx)(n.p,{children:"Android supports two alternative billing modes:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Alternative Billing Only"}),": Users can ONLY use your payment system"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User Choice Billing"}),": Users choose between Google Play or your payment system"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"configuring-alternative-billing-mode",children:"Configuring Alternative Billing Mode"}),"\n",(0,r.jsx)(n.p,{children:"Set the billing mode when initializing the connection:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import {initConnection} from 'react-native-iap';\n\n// Alternative Billing Only mode\nawait initConnection({\n  alternativeBillingModeAndroid: 'alternative-only',\n});\n\n// User Choice Billing mode\nawait initConnection({\n  alternativeBillingModeAndroid: 'user-choice',\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Or use the ",(0,r.jsx)(n.code,{children:"useIAP"})," hook:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import {useIAP} from 'react-native-iap';\n\nconst {connected} = useIAP({\n  alternativeBillingModeAndroid: 'alternative-only', // or 'user-choice'\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"mode-1-alternative-billing-only",children:"Mode 1: Alternative Billing Only"}),"\n",(0,r.jsxs)(n.p,{children:["This mode requires a manual 3-step flow. See ",(0,r.jsx)(n.a,{href:"https://github.com/hyochan/react-native-iap/blob/main/example/screens/AlternativeBilling.tsx",children:"AlternativeBilling.tsx"})," for a complete example that demonstrates:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Checking alternative billing availability"}),"\n",(0,r.jsx)(n.li,{children:"Showing the information dialog to users"}),"\n",(0,r.jsx)(n.li,{children:"Processing payments with your payment system"}),"\n",(0,r.jsx)(n.li,{children:"Creating and reporting tokens to Google Play"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"mode-2-user-choice-billing",children:"Mode 2: User Choice Billing"}),"\n",(0,r.jsxs)(n.p,{children:["With user choice, Google automatically shows a selection dialog. See ",(0,r.jsx)(n.a,{href:"https://github.com/hyochan/react-native-iap/blob/main/example/screens/AlternativeBilling.tsx",children:"AlternativeBilling.tsx"})," for a complete example that shows:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Setting up user choice mode with ",(0,r.jsx)(n.code,{children:"useIAP"})," hook"]}),"\n",(0,r.jsx)(n.li,{children:"Handling both Google Play and alternative billing selections"}),"\n",(0,r.jsxs)(n.li,{children:["Processing ",(0,r.jsx)(n.code,{children:"onUserChoiceBillingAndroid"})," callbacks"]}),"\n",(0,r.jsx)(n.li,{children:"Backend token reporting"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"user-choice-billing-event-listener",children:"User Choice Billing Event Listener"}),"\n",(0,r.jsxs)(n.p,{children:["For root API usage without the ",(0,r.jsx)(n.code,{children:"useIAP"})," hook:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import {userChoiceBillingListenerAndroid} from 'react-native-iap';\n\nconst subscription = userChoiceBillingListenerAndroid((details) => {\n  console.log('User chose alternative billing');\n  console.log('Products:', details.products);\n  console.log('Token:', details.externalTransactionToken);\n\n  // Send token to backend for Google Play reporting\n  reportToGooglePlay(details.externalTransactionToken);\n});\n\n// Later, remove the listener\nsubscription.remove();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"complete-cross-platform-example",children:"Complete Cross-Platform Example"}),"\n",(0,r.jsxs)(n.p,{children:["For a complete working example with full implementation details, see the ",(0,r.jsx)(n.a,{href:"https://github.com/hyochan/react-native-iap/blob/main/example/screens/AlternativeBilling.tsx",children:"AlternativeBilling.tsx"})," component in the example app."]}),"\n",(0,r.jsx)(n.p,{children:"The example demonstrates:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"iOS external purchase URL flow with notice sheets"}),"\n",(0,r.jsx)(n.li,{children:"Android alternative billing only mode (3-step flow)"}),"\n",(0,r.jsx)(n.li,{children:"Android user choice billing mode"}),"\n",(0,r.jsx)(n.li,{children:"Cross-platform error handling"}),"\n",(0,r.jsx)(n.li,{children:"Backend token reporting integration"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"general",children:"General"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backend Validation"}),": Always validate purchases on your backend server"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clear Communication"}),": Inform users they're leaving the app for external payment"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"ios-specific",children:"iOS Specific"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS Version Check"}),": Verify iOS 16.0+ before enabling alternative billing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"URL Validation"}),": Ensure external URLs are valid and secure (HTTPS)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"No Purchase Events"}),": Don't rely on ",(0,r.jsx)(n.code,{children:"purchaseUpdatedListener"})," when using external URLs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Deep Link Implementation"}),": Crucial for returning users to your app"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"android-specific",children:"Android Specific"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"24-Hour Reporting"}),": Report tokens to Google within 24 hours"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mode Selection"}),": Choose the appropriate mode for your use case"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User Experience"}),": User Choice mode provides better UX but shares revenue with Google"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backend Integration"}),": Implement proper token reporting to Google Play"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,r.jsx)(n.h3,{id:"ios-testing",children:"iOS Testing"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Test on real devices running iOS 16.0+"}),"\n",(0,r.jsx)(n.li,{children:"Verify external URL opens correctly in Safari"}),"\n",(0,r.jsx)(n.li,{children:"Test deep link return flow"}),"\n",(0,r.jsx)(n.li,{children:"Ensure StoreKit is configured for alternative billing"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"android-testing",children:"Android Testing"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Configure alternative billing in Google Play Console"}),"\n",(0,r.jsx)(n.li,{children:"Test both billing modes separately"}),"\n",(0,r.jsx)(n.li,{children:"Verify token generation and reporting"}),"\n",(0,r.jsx)(n.li,{children:"Test user choice dialog behavior"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"ios-issues",children:"iOS Issues"}),"\n",(0,r.jsx)(n.h4,{id:"feature-not-supported",children:'"Feature not supported"'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ensure iOS 16.0 or later"}),"\n",(0,r.jsx)(n.li,{children:"Verify external purchase entitlement is approved"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"external-url-not-opening",children:'"External URL not opening"'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Check URL format (must be valid HTTPS)"}),"\n",(0,r.jsx)(n.li,{children:"Verify Info.plist configuration"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"user-stuck-on-external-site",children:'"User stuck on external site"'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Implement deep linking to return to app"}),"\n",(0,r.jsx)(n.li,{children:"Test deep link handling"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"android-issues",children:"Android Issues"}),"\n",(0,r.jsx)(n.h4,{id:"alternative-billing-not-available",children:'"Alternative billing not available"'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Verify Google Play approval"}),"\n",(0,r.jsx)(n.li,{children:"Check device and Play Store version"}),"\n",(0,r.jsx)(n.li,{children:"Ensure billing mode is configured"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"token-creation-failed",children:'"Token creation failed"'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Verify product ID is correct"}),"\n",(0,r.jsx)(n.li,{children:"Check billing mode configuration"}),"\n",(0,r.jsx)(n.li,{children:"Ensure user completed info dialog"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"user-choice-dialog-not-showing",children:'"User choice dialog not showing"'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Verify ",(0,r.jsx)(n.code,{children:"alternativeBillingModeAndroid: 'user-choice'"})]}),"\n",(0,r.jsxs)(n.li,{children:["Ensure ",(0,r.jsx)(n.code,{children:"useAlternativeBilling: true"})," in request"]}),"\n",(0,r.jsx)(n.li,{children:"Check Google Play configuration"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"platform-requirements",children:"Platform Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS"}),": iOS 16.0+ for external purchase URLs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Android"}),": Google Play Billing Library 5.0+ with alternative billing enabled"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Approval"}),": Both platforms require approval for alternative billing features"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,r.jsx)(n.p,{children:"For detailed API documentation, see:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/api/methods/core-methods#alternative-billing-apis",children:"Core Methods - Alternative Billing APIs"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/api/types",children:"Type Definitions"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.openiap.dev/docs/alternative-billing",children:"OpenIAP Alternative Billing Specification"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/hyochan/react-native-iap/tree/main/example",children:"Example App"})," - See ",(0,r.jsx)(n.code,{children:"AlternativeBilling.tsx"})," for a complete working example"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},571:(e,n,i)=>{i.d(n,{A:()=>s});var l=i(6540),r=i(4848);function t({className:e="adfit",style:n,unit:i,height:t,width:s}){return(0,l.useEffect)(()=>{const n=setTimeout(()=>{const n=document.querySelector(`.${e}`);if(!n)return void console.warn(`AdFit: Element with class "${e}" not found`);const l=n.querySelectorAll(".kakao_ad_area"),r=n.querySelectorAll('script[src*="kas/static/ba.min.js"]');l.forEach(e=>e.remove()),r.forEach(e=>e.remove());const o=document.createElement("ins"),a=document.createElement("script");o.className="kakao_ad_area",o.style.cssText="display:none; width:100%;",a.async=!0,a.type="text/javascript",a.src="//t1.daumcdn.net/kas/static/ba.min.js",o.setAttribute("data-ad-width",s.toString()),o.setAttribute("data-ad-height",t.toString()),o.setAttribute("data-ad-unit",i),n.appendChild(o),n.appendChild(a)},100);return()=>clearTimeout(n)},[e,i,t,s]),(0,r.jsx)("div",{style:n,children:(0,r.jsx)("div",{className:e})})}function s(){return(0,r.jsx)(t,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var l=i(6540);const r={},t=l.createContext(r);function s(e){const n=l.useContext(t);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);