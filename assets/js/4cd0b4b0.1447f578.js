"use strict";(self.webpackChunkreact_native_iap_docs=self.webpackChunkreact_native_iap_docs||[]).push([[7280],{571:(e,n,s)=>{s.d(n,{A:()=>r});var i=s(6540),t=s(4848);function c({className:e="adfit",style:n,unit:s,height:c,width:r}){return(0,i.useEffect)(()=>{const n=setTimeout(()=>{const n=document.querySelector(`.${e}`);if(!n)return void console.warn(`AdFit: Element with class "${e}" not found`);const i=n.querySelectorAll(".kakao_ad_area"),t=n.querySelectorAll('script[src*="kas/static/ba.min.js"]');i.forEach(e=>e.remove()),t.forEach(e=>e.remove());const a=document.createElement("ins"),o=document.createElement("script");a.className="kakao_ad_area",a.style.cssText="display:none; width:100%;",o.async=!0,o.type="text/javascript",o.src="//t1.daumcdn.net/kas/static/ba.min.js",a.setAttribute("data-ad-width",r.toString()),a.setAttribute("data-ad-height",c.toString()),a.setAttribute("data-ad-unit",s),n.appendChild(a),n.appendChild(o)},100);return()=>clearTimeout(n)},[e,s,c,r]),(0,t.jsx)("div",{style:n,children:(0,t.jsx)("div",{className:e})})}function r(){return(0,t.jsx)(c,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},5931:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"examples/subscription-flow","title":"Subscription Flow","description":"A focused subscription experience built with the useIAP hook.","source":"@site/docs/examples/subscription-flow.md","sourceDirName":"examples","slug":"/examples/subscription-flow","permalink":"/react-native-iap/docs/examples/subscription-flow","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/react-native-iap/tree/main/docs/docs/examples/subscription-flow.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Subscription Flow","sidebar_label":"Subscriptions","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Purchase Flow","permalink":"/react-native-iap/docs/examples/purchase-flow"},"next":{"title":"Available Purchases","permalink":"/react-native-iap/docs/examples/available-purchases"}}');var t=s(4848),c=s(8453),r=s(571);const a={title:"Subscription Flow",sidebar_label:"Subscriptions",sidebar_position:2},o="Subscription Flow",l={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Core Pattern",id:"core-pattern",level:2},{value:"Notes",id:"notes",level:2},{value:"Flow Overview",id:"flow-overview",level:2},{value:"Example server validation",id:"example-server-validation",level:3},{value:"Checking Subscription Status",id:"checking-subscription-status",level:2},{value:"Using <code>getAvailablePurchases()</code>",id:"using-getavailablepurchases",level:3},{value:"Using <code>getActiveSubscriptions()</code> and <code>hasActiveSubscriptions()</code>",id:"using-getactivesubscriptions-and-hasactivesubscriptions",level:3},{value:"Check specific plan",id:"check-specific-plan",level:4},{value:"Status Semantics",id:"status-semantics",level:3},{value:"Testing Checklist",id:"testing-checklist",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Source",id:"source",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"subscription-flow",children:"Subscription Flow"})}),"\n",(0,t.jsx)(r.A,{}),"\n",(0,t.jsxs)(n.p,{children:["A focused subscription experience built with the ",(0,t.jsx)(n.code,{children:"useIAP"})," hook."]}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Configure subscription base plans (Android) and subscription groups (iOS)"}),"\n",(0,t.jsx)(n.li,{children:"Ensure test users are added to each console"}),"\n",(0,t.jsx)(n.li,{children:"Decide initial products and offers to present"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"core-pattern",children:"Core Pattern"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import {useEffect} from 'react';\nimport {\n  useIAP,\n  requestPurchase,\n  deepLinkToSubscriptions,\n} from 'react-native-iap';\n\nconst SUB_IDS = ['your.monthly', 'your.yearly'];\n\nexport function SubscriptionFlowExample() {\n  const {\n    connected,\n    subscriptions,\n    activeSubscriptions,\n    fetchProducts,\n    getActiveSubscriptions,\n    finishTransaction,\n  } = useIAP({\n    onPurchaseSuccess: async (purchase) => {\n      // 4) Validate on server, then finish\n      const ok = await validateSubscriptionOnServer(purchase);\n      if (ok) {\n        await finishTransaction({purchase, isConsumable: false});\n      }\n      await getActiveSubscriptions();\n    },\n  });\n\n  useEffect(() => {\n    // 1) initConnection via hook. 2) Fetch subscriptions once connected\n    if (connected) {\n      fetchProducts({skus: SUB_IDS, type: 'subs'});\n      // Optionally load current status at start\n      getActiveSubscriptions();\n    }\n  }, [connected, fetchProducts, getActiveSubscriptions]);\n\n  const subscribe = async (productId: string) => {\n    const product = subscriptions.find((p) => p.id === productId);\n    // 3) Request purchase; result via onPurchaseSuccess/onPurchaseError\n    await requestPurchase({\n      request: {\n        ios: {sku: productId},\n        android: {\n          skus: [productId],\n          subscriptionOffers:\n            product?.subscriptionOfferDetails?.map((o) => ({\n              sku: productId,\n              offerToken: o.offerToken,\n            })) || [],\n        },\n      },\n      type: 'subs',\n    });\n  };\n\n  const manage = () => deepLinkToSubscriptions();\n\n  return null;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"activeSubscriptions"})," or ",(0,t.jsx)(n.code,{children:"getActiveSubscriptions()"})," to determine status."]}),"\n",(0,t.jsxs)(n.li,{children:["Always finish subscription transactions with ",(0,t.jsx)(n.code,{children:"isConsumable: false"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["On Android, pass ",(0,t.jsx)(n.code,{children:"subscriptionOffers"})," when available."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"flow-overview",children:"Flow Overview"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["initConnection: Hook initializes on mount; check ",(0,t.jsx)(n.code,{children:"connected"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"fetchProducts: Fetch subscriptions after connection is ready."}),"\n",(0,t.jsx)(n.li,{children:"requestPurchase: Initiate subscription purchase."}),"\n",(0,t.jsxs)(n.li,{children:["Server validation: Validate subscription on server with ",(0,t.jsx)(n.code,{children:"purchaseToken"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"finishTransaction: Complete the transaction only after validation."}),"\n",(0,t.jsxs)(n.li,{children:["Refresh status: Call ",(0,t.jsx)(n.code,{children:"getActiveSubscriptions()"})," to update UI."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example-server-validation",children:"Example server validation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"async function validateSubscriptionOnServer(purchase: {\n  purchaseToken: string;\n  productId?: string;\n}) {\n  const res = await fetch('https://your.server/validate-subscription', {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify({\n      platform: Platform.OS,\n      productId: purchase.productId,\n      purchaseToken: purchase.purchaseToken,\n    }),\n  });\n  const json = await res.json();\n  return Boolean(json?.isActive);\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"checking-subscription-status",children:"Checking Subscription Status"}),"\n",(0,t.jsxs)(n.h3,{id:"using-getavailablepurchases",children:["Using ",(0,t.jsx)(n.code,{children:"getAvailablePurchases()"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Purpose: Restore/sync past purchases recorded in the store. Does not guarantee that a subscription is currently active; use it to display history or trigger re-validation."}),"\n",(0,t.jsxs)(n.li,{children:["When to call:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Once after initial screen load when ",(0,t.jsx)(n.code,{children:"connected"})," becomes true"]}),"\n",(0,t.jsx)(n.li,{children:"When the user taps \u201cRestore Purchases\u201d"}),"\n",(0,t.jsx)(n.li,{children:"Right after a successful subscription purchase to refresh UI"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Note: Always confirm the current active status using ",(0,t.jsx)(n.code,{children:"getActiveSubscriptions()"})," or your server."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'function RestoreSubscriptions() {\n  const {\n    connected,\n    getAvailablePurchases,\n    availablePurchases,\n    getActiveSubscriptions,\n  } = useIAP();\n\n  const onRestore = async () => {\n    if (!connected) return;\n    await getAvailablePurchases();\n    // After restore, sync actual active status\n    await getActiveSubscriptions();\n  };\n\n  return (\n    <View>\n      <Button title="Restore Purchases" onPress={onRestore} />\n      {availablePurchases.map((p, i) => (\n        <Text key={p.productId + i}>{p.productId}</Text>\n      ))}\n    </View>\n  );\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"using-getactivesubscriptions-and-hasactivesubscriptions",children:["Using ",(0,t.jsx)(n.code,{children:"getActiveSubscriptions()"})," and ",(0,t.jsx)(n.code,{children:"hasActiveSubscriptions()"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["When to call:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"On app/startup after connection to hydrate UI"}),"\n",(0,t.jsx)(n.li,{children:"After a successful purchase or restore"}),"\n",(0,t.jsx)(n.li,{children:"Before gating premium features"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"activeSubscriptions"})," state vs method:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"activeSubscriptions"})," is kept in state and updates after ",(0,t.jsx)(n.code,{children:"getActiveSubscriptions()"})," calls"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"getActiveSubscriptions(ids?)"})," returns fresh data and also updates the state"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"hasActiveSubscriptions(ids?)"})," is a fast boolean helper for gating"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Filtering by tiers/ids:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Pass a subset ",(0,t.jsx)(n.code,{children:"ids"})," to check a specific plan or tier"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"UI gating pattern:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"function PremiumGate({children}: {children: React.ReactNode}) {\n  const {connected, hasActiveSubscriptions, getActiveSubscriptions} = useIAP();\n  const [allowed, setAllowed] = useState(false);\n\n  useEffect(() => {\n    if (!connected) return;\n    (async () => {\n      await getActiveSubscriptions(); // hydrate\n      const ok = await hasActiveSubscriptions();\n      setAllowed(ok);\n    })();\n  }, [connected, getActiveSubscriptions, hasActiveSubscriptions]);\n\n  if (!allowed) return <Paywall />;\n  return <>{children}</>;\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"check-specific-plan",children:"Check specific plan"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const hasYearly = await hasActiveSubscriptions(['com.app.yearly']);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"status-semantics",children:"Status Semantics"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["iOS: ",(0,t.jsx)(n.code,{children:"expirationDateIOS"})," indicates expiry; use server receipt validation for source of truth"]}),"\n",(0,t.jsxs)(n.li,{children:["Android: ",(0,t.jsx)(n.code,{children:"autoRenewingAndroid"})," can be false for canceled renewals; also validate on server"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"testing-checklist",children:"Testing Checklist"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Verify active status updates after purchase/restoration"}),"\n",(0,t.jsx)(n.li,{children:"Test upgrade/downgrade scenarios on Android with offers"}),"\n",(0,t.jsxs)(n.li,{children:["Validate status on app launch using ",(0,t.jsx)(n.code,{children:"getActiveSubscriptions()"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Subscription not active: ensure ",(0,t.jsx)(n.code,{children:"finishTransaction"})," was called and server validation succeeds"]}),"\n",(0,t.jsx)(n.li,{children:"Cannot purchase: check if user already has an active subscription in that group"}),"\n",(0,t.jsxs)(n.li,{children:["Manage link not opening: confirm ",(0,t.jsx)(n.code,{children:"deepLinkToSubscriptions()"})," usage and device supports it"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"source",children:"Source"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["SubscriptionFlow.tsx: ",(0,t.jsx)(n.a,{href:"https://github.com/hyochan/react-native-iap/blob/main/example/screens/SubscriptionFlow.tsx",children:"https://github.com/hyochan/react-native-iap/blob/main/example/screens/SubscriptionFlow.tsx"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var i=s(6540);const t={},c=i.createContext(t);function r(e){const n=i.useContext(c);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);