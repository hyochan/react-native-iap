name: CI - iOS Build
on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/ci-ios.yml'
      - '.github/actions/**'
      - 'ios/**'
      - 'nitrogen/**'
      - 'src/types/**'
      - 'src/*.nitro.ts'
      - 'example/ios/**'
      - 'example/Gemfile*'
      - 'example/Podfile*'
      - 'example/package.json'
      - 'nitro.json'
  pull_request:
    branches:
      - main
    paths:
      - '.github/workflows/ci-ios.yml'
      - '.github/actions/**'
      - 'ios/**'
      - 'nitrogen/**'
      - 'src/types/**'
      - 'src/*.nitro.ts'
      - 'example/ios/**'
      - 'example/Gemfile*'
      - 'example/Podfile*'
      - 'example/package.json'
      - 'nitro.json'
  merge_group:
    types:
      - checks_requested

jobs:
  build-ios:
    runs-on: macos-15
    timeout-minutes: 45 # Set explicit timeout to prevent hanging builds
    env:
      XCODE_VERSION: 16.4
      CCACHE_DIR: ~/.ccache
      CCACHE_MAXSIZE: 2G
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup
        uses: ./.github/actions/setup

      - name: Generate nitrogen code
        run: bun run nitrogen

      - name: Use appropriate Xcode version
        uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd # v1.6.0
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      # Install and cache ccache for faster C/C++ compilation
      - name: Install ccache
        run: brew install ccache

      - name: Cache ccache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      # Cache Xcode DerivedData for incremental builds
      - name: Cache Xcode DerivedData
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            example/ios/build
          key: ${{ runner.os }}-deriveddata-${{ hashFiles('example/ios/IapExample.xcworkspace/**') }}-${{ hashFiles('example/ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-

      # Enhanced CocoaPods caching with better key strategy
      - name: Cache CocoaPods
        id: cocoapods-cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            example/ios/Pods
            ~/Library/Caches/CocoaPods
          key: ${{ runner.os }}-cocoapods-${{ hashFiles('example/ios/Podfile', 'example/ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-cocoapods-${{ hashFiles('example/ios/Podfile') }}
            ${{ runner.os }}-cocoapods-

      # Cache node_modules to speed up dependency installation
      - name: Cache node_modules
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            example/node_modules
            ~/.bun/install/cache
          key: ${{ runner.os }}-node-${{ hashFiles('example/package.json', 'example/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Ruby
        uses: ruby/setup-ruby@c04af2bb7258bb6a03df1d3c1865998ac9390972 # v1.194.0
        with:
          ruby-version: '2.7.2'
          working-directory: example
          bundler-cache: true # Automatically cache bundle dependencies

      - name: Install Ruby dependencies
        run: |
          cd example
          bundle config set --local deployment false
          bundle config set --local path vendor/bundle
          bundle install --jobs 4 --retry 3  # Parallel installation with retry

      - name: Install example dependencies
        run: |
          cd example
          if [ ! -d "node_modules" ]; then
            echo "Installing node modules..."
            bun install --frozen-lockfile
          else
            echo "Using cached node modules"
          fi
          # Remove circular references to prevent infinite recursion
          rm -rf node_modules/react-native-iap/example
          rm -rf node_modules/react-native-iap/node_modules

      - name: Clean CocoaPods if needed
        run: |
          cd example/ios
          # Remove potentially stale lockfile to prevent deployment mode errors
          if [ -f "Podfile.lock" ] && [ "${{ steps.cocoapods-cache.outputs.cache-hit }}" != "true" ]; then
            echo "Removing stale Podfile.lock..."
            rm -f Podfile.lock
          fi

      - name: Install cocoapods
        run: |
          cd example
          if [ "${{ steps.cocoapods-cache.outputs.cache-hit }}" != "true" ]; then
            echo "Installing pods..."
            # Don't use --deployment flag in CI to avoid lockfile mismatch
            bundle exec pod install --project-directory=ios
          else
            echo "Using cached pods, updating if necessary..."
            # Update pods without --deployment to handle lockfile changes
            bundle exec pod install --project-directory=ios --no-repo-update
          fi

      - name: Setup build environment
        run: |
          # Setup ccache
          export PATH="/opt/homebrew/opt/ccache/libexec:$PATH"
          ccache -s
          ccache -z  # Zero statistics

      - name: Build example for iOS (Optimized)
        run: |
          cd example/ios

          # Setup ccache path
          export PATH="/opt/homebrew/opt/ccache/libexec:$PATH"

          # Check if xcbeautify is installed, install if not
          if ! command -v xcbeautify &> /dev/null; then
            echo "Installing xcbeautify..."
            brew install xcbeautify
          fi

          # Build with optimization flags
          xcodebuild -workspace IapExample.xcworkspace \
            -scheme IapExample \
            -configuration Debug \
            -sdk iphonesimulator \
            -derivedDataPath build \
            -destination 'platform=iOS Simulator,name=iPhone 16' \
            ONLY_ACTIVE_ARCH=YES \
            EXCLUDED_ARCHS="arm64" \
            COMPILER_INDEX_STORE_ENABLE=NO \
            GCC_OPTIMIZATION_LEVEL=0 \
            SWIFT_OPTIMIZATION_LEVEL=-Onone \
            SWIFT_COMPILATION_MODE=singlefile \
            SWIFT_WHOLE_MODULE_OPTIMIZATION=NO \
            BUILD_LIBRARY_FOR_DISTRIBUTION=NO \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            ENABLE_BITCODE=NO \
            DEBUG_INFORMATION_FORMAT=dwarf \
            CLANG_ENABLE_MODULES=NO \
            ENABLE_TESTING_SEARCH_PATHS=NO \
            GCC_GENERATE_DEBUGGING_SYMBOLS=NO \
            MTL_ENABLE_DEBUG_INFO=NO \
            -jobs $(sysctl -n hw.ncpu) \
            -parallelizeTargets \
            -quiet | xcbeautify --quieter || true

          # Print ccache statistics
          ccache -s

      # Upload build artifacts on failure for debugging
      - name: Upload build artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-logs
          path: |
            example/ios/build/Build/Products/Debug-iphonesimulator/
            ~/Library/Logs/DiagnosticReports/
          retention-days: 3
