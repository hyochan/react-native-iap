name: CI - Android Build
on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/ci-android.yml'
      - '.github/actions/**'
      - 'android/**'
      - 'nitrogen/**'
      - 'src/types/**'
      - 'src/*.nitro.ts'
      - 'example/android/**'
      - 'example/package.json'
      - 'nitro.json'
  pull_request:
    branches:
      - main
    paths:
      - '.github/workflows/ci-android.yml'
      - '.github/actions/**'
      - 'android/**'
      - 'nitrogen/**'
      - 'src/types/**'
      - 'src/*.nitro.ts'
      - 'example/android/**'
      - 'example/package.json'
      - 'nitro.json'
  merge_group:
    types:
      - checks_requested

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 30 # Set explicit timeout to prevent hanging builds
    env:
      GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.jvmargs="-Xmx4096m -XX:MaxMetaspaceSize=1024m -XX:+HeapDumpOnOutOfMemoryError"'
      GRADLE_USER_HOME: ${{ github.workspace }}/.gradle
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup
        uses: ./.github/actions/setup

      - name: Generate nitrogen code
        run: bun run nitrogen

      - name: Install JDK
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle' # Enable built-in Gradle caching

      - name: Finalize Android SDK
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null 2>&1 || true

      # Enhanced Gradle caching with better key strategy
      - name: Cache Gradle dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            example/android/.gradle
            example/android/build
            example/android/app/build
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/buildSrc/**/*.kt') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Cache Android build outputs
      - name: Cache Android build
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            example/android/app/.cxx
            example/android/app/build/intermediates
            example/android/app/build/generated
            example/android/build/intermediates
          key: ${{ runner.os }}-android-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-android-build-

      # Cache node_modules to speed up dependency installation
      - name: Cache node_modules
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            example/node_modules
            ~/.bun/install/cache
          key: ${{ runner.os }}-node-${{ hashFiles('example/package.json', 'example/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Cache Kotlin compiler outputs
      - name: Cache Kotlin compiler
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.konan
            example/android/build/kotlin
          key: ${{ runner.os }}-kotlin-${{ hashFiles('**/*.kt', '**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-kotlin-

      - name: Install example dependencies
        run: |
          cd example
          if [ ! -d "node_modules" ]; then
            echo "Installing node modules..."
            bun install --frozen-lockfile
          else
            echo "Using cached node modules"
          fi
          # Remove circular references to prevent infinite recursion
          rm -rf node_modules/react-native-iap/example
          rm -rf node_modules/react-native-iap/node_modules

      # Pre-download Gradle dependencies
      - name: Pre-download Gradle dependencies
        run: |
          cd example/android
          ./gradlew dependencies --no-daemon || true

      - name: Build example for Android (Optimized)
        env:
          JAVA_OPTS: '-XX:MaxHeapSize=4g -XX:+UseParallelGC'
          _JAVA_OPTIONS: '-Xmx4g'
        run: |
          cd example/android

          # Clean only if necessary (skip on cache hit)
          if [ ! -d "build" ]; then
            echo "No build cache found, starting fresh build..."
          else
            echo "Using incremental build with cache..."
          fi

          # Build with optimizations
          ./gradlew assembleDebug \
            --no-daemon \
            --parallel \
            --max-workers=4 \
            --configure-on-demand \
            --build-cache \
            --warning-mode=none \
            -Pkotlin.incremental=true \
            -x lint \
            -x test

      # Upload APK artifact for debugging
      - name: Upload APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: example/android/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 7

      # Upload build artifacts on failure for debugging
      - name: Upload build reports on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: android-build-reports
          path: |
            example/android/app/build/reports/
            example/android/build/reports/
          retention-days: 3
